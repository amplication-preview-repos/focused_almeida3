/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Subreddit as PrismaSubreddit,
  Post as PrismaPost,
} from "@prisma/client";

export class SubredditServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SubredditCountArgs, "select">
  ): Promise<number> {
    return this.prisma.subreddit.count(args);
  }

  async subreddits(
    args: Prisma.SubredditFindManyArgs
  ): Promise<PrismaSubreddit[]> {
    return this.prisma.subreddit.findMany(args);
  }
  async subreddit(
    args: Prisma.SubredditFindUniqueArgs
  ): Promise<PrismaSubreddit | null> {
    return this.prisma.subreddit.findUnique(args);
  }
  async createSubreddit(
    args: Prisma.SubredditCreateArgs
  ): Promise<PrismaSubreddit> {
    return this.prisma.subreddit.create(args);
  }
  async updateSubreddit(
    args: Prisma.SubredditUpdateArgs
  ): Promise<PrismaSubreddit> {
    return this.prisma.subreddit.update(args);
  }
  async deleteSubreddit(
    args: Prisma.SubredditDeleteArgs
  ): Promise<PrismaSubreddit> {
    return this.prisma.subreddit.delete(args);
  }

  async findPosts(
    parentId: string,
    args: Prisma.PostFindManyArgs
  ): Promise<PrismaPost[]> {
    return this.prisma.subreddit
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .posts(args);
  }
}
