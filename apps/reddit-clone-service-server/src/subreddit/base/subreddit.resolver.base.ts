/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Subreddit } from "./Subreddit";
import { SubredditCountArgs } from "./SubredditCountArgs";
import { SubredditFindManyArgs } from "./SubredditFindManyArgs";
import { SubredditFindUniqueArgs } from "./SubredditFindUniqueArgs";
import { CreateSubredditArgs } from "./CreateSubredditArgs";
import { UpdateSubredditArgs } from "./UpdateSubredditArgs";
import { DeleteSubredditArgs } from "./DeleteSubredditArgs";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { Post } from "../../post/base/Post";
import { SubredditService } from "../subreddit.service";
@graphql.Resolver(() => Subreddit)
export class SubredditResolverBase {
  constructor(protected readonly service: SubredditService) {}

  async _subredditsMeta(
    @graphql.Args() args: SubredditCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Subreddit])
  async subreddits(
    @graphql.Args() args: SubredditFindManyArgs
  ): Promise<Subreddit[]> {
    return this.service.subreddits(args);
  }

  @graphql.Query(() => Subreddit, { nullable: true })
  async subreddit(
    @graphql.Args() args: SubredditFindUniqueArgs
  ): Promise<Subreddit | null> {
    const result = await this.service.subreddit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Subreddit)
  async createSubreddit(
    @graphql.Args() args: CreateSubredditArgs
  ): Promise<Subreddit> {
    return await this.service.createSubreddit({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Subreddit)
  async updateSubreddit(
    @graphql.Args() args: UpdateSubredditArgs
  ): Promise<Subreddit | null> {
    try {
      return await this.service.updateSubreddit({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Subreddit)
  async deleteSubreddit(
    @graphql.Args() args: DeleteSubredditArgs
  ): Promise<Subreddit | null> {
    try {
      return await this.service.deleteSubreddit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Post], { name: "posts" })
  async findPosts(
    @graphql.Parent() parent: Subreddit,
    @graphql.Args() args: PostFindManyArgs
  ): Promise<Post[]> {
    const results = await this.service.findPosts(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
