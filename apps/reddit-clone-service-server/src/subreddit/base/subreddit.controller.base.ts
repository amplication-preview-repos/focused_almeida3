/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SubredditService } from "../subreddit.service";
import { SubredditCreateInput } from "./SubredditCreateInput";
import { Subreddit } from "./Subreddit";
import { Post } from "../../post/base/Post";
import { SubredditFindManyArgs } from "./SubredditFindManyArgs";
import { SubredditWhereUniqueInput } from "./SubredditWhereUniqueInput";
import { SubredditUpdateInput } from "./SubredditUpdateInput";
import { PostFindManyArgs } from "../../post/base/PostFindManyArgs";
import { PostWhereUniqueInput } from "../../post/base/PostWhereUniqueInput";

export class SubredditControllerBase {
  constructor(protected readonly service: SubredditService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Subreddit })
  async createSubreddit(
    @common.Body() data: SubredditCreateInput
  ): Promise<Subreddit> {
    return await this.service.createSubreddit({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Subreddit] })
  @ApiNestedQuery(SubredditFindManyArgs)
  async subreddits(@common.Req() request: Request): Promise<Subreddit[]> {
    const args = plainToClass(SubredditFindManyArgs, request.query);
    return this.service.subreddits({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Subreddit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async subreddit(
    @common.Param() params: SubredditWhereUniqueInput
  ): Promise<Subreddit | null> {
    const result = await this.service.subreddit({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Subreddit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSubreddit(
    @common.Param() params: SubredditWhereUniqueInput,
    @common.Body() data: SubredditUpdateInput
  ): Promise<Subreddit | null> {
    try {
      return await this.service.updateSubreddit({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Subreddit })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSubreddit(
    @common.Param() params: SubredditWhereUniqueInput
  ): Promise<Subreddit | null> {
    try {
      return await this.service.deleteSubreddit({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/posts")
  @ApiNestedQuery(PostFindManyArgs)
  async findPosts(
    @common.Req() request: Request,
    @common.Param() params: SubredditWhereUniqueInput
  ): Promise<Post[]> {
    const query = plainToClass(PostFindManyArgs, request.query);
    const results = await this.service.findPosts(params.id, {
      ...query,
      select: {
        content: true,
        createdAt: true,
        id: true,

        subreddit: {
          select: {
            id: true,
          },
        },

        title: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/posts")
  async connectPosts(
    @common.Param() params: SubredditWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        connect: body,
      },
    };
    await this.service.updateSubreddit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/posts")
  async updatePosts(
    @common.Param() params: SubredditWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        set: body,
      },
    };
    await this.service.updateSubreddit({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/posts")
  async disconnectPosts(
    @common.Param() params: SubredditWhereUniqueInput,
    @common.Body() body: PostWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      posts: {
        disconnect: body,
      },
    };
    await this.service.updateSubreddit({
      where: params,
      data,
      select: { id: true },
    });
  }
}
